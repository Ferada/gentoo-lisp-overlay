Index: contrib/slime-indentation.el
===================================================================
RCS file: /project/slime/cvsroot/slime/contrib/slime-indentation.el,v
retrieving revision 1.2
diff -u -u -r1.2 slime-indentation.el
--- contrib/slime-indentation.el	14 Apr 2008 21:31:20 -0000	1.2
+++ contrib/slime-indentation.el	4 Jul 2008 18:33:07 -0000
@@ -1031,58 +1031,57 @@
 
 (mapcar #'define-cl-indent
 	'((block 1)
-	  (case		(4 &rest (&whole 2 &rest 3)))
+	  (case		(4 &rest (&whole 2 &rest 1)))
 	  (ccase . case) (ecase . case)
 	  (typecase . case) (etypecase . case) (ctypecase . case)
-	  (handler-bind . let)
-	  (handler-case (4 &rest (&whole 2 4 &rest 2)))
 	  (catch 1)
 	  (cond		cl-indent:indent-cond)
 	  (defvar	(4 2 2))
-	  (defconstant . defvar) (defparameter . defvar)
-	  (defclass	(6 6 (&whole 2 &rest 1) &rest 2))
-	  (define-modify-macro
-			(4 &body))
-	  (defsetf	(4 (&whole 4 &rest 1) 4 &body))
-	  (defun	(4 (&whole 4 &rest 1) &body))
-	  (defmacro . defun) (define-setf-method . defun) (deftype . defun)
-          (defgeneric   cl-indent:indent-defgeneric)
+	  (defconstant . defvar)
+      (defparameter . defvar)
+	  (defclass	(6 6 (&whole 2 &rest 1) &rest 2)) (define-condition  . defclass)
+      (define-modify-macro (4 (&whole 4 &rest 1) &body))
+      (defsetf     (4 (&whole 4 &rest 1) 4 &body))
+      (defun       (4 (&whole 4 &rest 1) &body))
+      (define-setf-method . defun)
+      (define-setf-expander . defun)
+      (defmacro . defun) (deftype . defun)
+      (defgeneric   cl-indent:indent-defgeneric)
 	  (defmethod	cl-indent:indent-defmethod)
+      (defpackage  (4 2))
 	  (defstruct	((&whole 4 &rest (&whole 2 &rest 1))
-			 &rest (&whole 2 &rest 1)))
-	  (destructuring-bind
-			((&whole 6 &rest 1) 4 &body))
-	  (do		((&whole 4 &rest (&whole 1 &rest 2)) ; ((arg step incr))
-			 (&whole 4 &rest 3) ; result: ((condition) (form) ...)
-			 &rest cl-indent:indent-do))
+                      &rest (&whole 2 &rest 1)))
+	  (destructuring-bind ((&whole 6 &rest 1) 4 &body))
+	  (do ((&whole 4 &rest (&whole 1 &rest 2)) ; ((arg step incr))
+           (&whole 4 &rest 3) ; result: ((condition) (form) ...)
+           &rest cl-indent:indent-do))
 	  (do* . do)
-          (do-all-symbols (4 &body))
-          (do-symbols (4 &body))
-          (do-external-symbols (4 &body))
+      (do-all-symbols (4 &body))
+      (do-symbols (4 &body))
+      (do-external-symbols (4 &body))
 	  (dolist	((&whole 4 2 1) &body))
 	  (dotimes . dolist)
 	  (eval-when 1)
-	  (flet		((&whole 4 &rest (&whole 1 (&whole 4 &rest 1) &body))
-			 &body))
+	  (flet		((&whole 4 &rest (&whole 1 (&whole 4 &rest 1) &body)) &body))
 	  (labels . flet) (macrolet . flet)
-	  (if		(&rest 2))
+	  (handler-case (4 &rest (&whole 2 4 &rest 2)))
+	  (if		(&rest 4))
 	  ;; FIXME: Which of those do I really want?
 	  ;; (lambda	((&whole 4 &rest 1) &body))
-	  (lambda	((&whole 4 &rest 1)
-			 &rest cl-indent:indent-function-lambda-hack))
+	  (lambda	((&whole 4 &rest 1) &rest cl-indent:indent-function-lambda-hack))
 	  (let		((&whole 4 &rest (&whole 1 1 2)) &body))
 	  (let* . let) (compiler-let . let)
+      (handler-bind . let) (restart-bind . let)
 	  (locally 1)
 	  (loop cl-indent::indent-loop-macro)
-	  (multiple-value-bind
-			((&whole 6 &rest 1) 4 &body))
-	  (multiple-value-call
-			(4 &body))
+      (:method ((&whole 4 &rest 1) &body)) ; in `defgeneric'
+	  (multiple-value-bind ((&whole 6 &rest 1) 4 &body))
+	  (multiple-value-call (4 &body))
 	  (multiple-value-list 1)
 	  (multiple-value-prog1 1)
-	  (multiple-value-setq
-			(4 2))
-	  (print-unreadable-object 1)
+	  (multiple-value-setq (4 2))
+      (multiple-value-setf . multiple-value-setq)
+      (print-unreadable-object ((&whole 4 1 &rest 1) &body))
 	  ;; Combines the worst features of BLOCK, LET and TAGBODY
 	  (prog		((&whole 4 &rest 1) &rest cl-indent:indent-tagbody))
 	  (prog* . prog)
@@ -1090,26 +1089,28 @@
 	  (prog2 2)
 	  (progn 0)
 	  (progv	(4 4 &body))
-          (restart-case . handler-case)
+      (restart-case . handler-case)
 	  (return 0)
 	  (return-from	(nil &body))
+      (symbol-macrolet . let)
 	  (tagbody	cl-indent:indent-tagbody)
 	  (throw 1)
 	  (unless 1)
-	  (unwind-protect
-			(5 &body))
+	  (unwind-protect (5 &body))
 	  (values 0)
 	  (when 1)
-          (with-accessors (6 4 &body))
-          (with-compilation-unit (4 &body))
-          (with-hash-table-iterator (4 &body))
-          (with-output-to-string (4 &body))
-          (with-input-from-string . with-output-to-string)
-          (with-open-file (4 &body))
-          (with-open-stream . with-open-file)
-          (with-package-iterator (4 &body))
-          (with-simple-restart (4 &body))
-          (with-slots (6 4 &body))))
+      (with-accessors . multiple-value-bind)
+      (with-condition-restarts . multiple-value-bind)
+      (with-compilation-unit (4 &body))
+      (with-hash-table-iterator (4 &body))
+      (with-output-to-string (4 &body))
+      (with-input-from-string . with-output-to-string)
+      (with-open-file (4 &body))
+      (with-open-stream . with-open-file)
+      (with-package-iterator (4 &body))
+      (with-simple-restart (4 &body))
+      (with-slots . multiple-value-bind)
+      (with-standard-io-syntax (2))))
 
 ;; OK, we're almost finished.
 ;;
