diff --git a/swank-ecl.lisp b/swank-ecl.lisp
index 6d3786f..239f52b 100644
--- a/swank-ecl.lisp
+++ b/swank-ecl.lisp
@@ -26,7 +26,8 @@
 
 ;;;; TCP Server
 
-(require 'sockets)
+(eval-when (:compile-toplevel :load-toplevel :execute)
+  (require 'sockets))
 
 (defun resolve-hostname (name)
   (car (sb-bsd-sockets:host-ent-addresses
@@ -206,23 +207,24 @@
 
 ;;; Debugging
 
-(import
- '(si::*break-env*
-   si::*ihs-top*
-   si::*ihs-current*
-   si::*ihs-base*
-   si::*frs-base*
-   si::*frs-top*
-   si::*tpl-commands*
-   si::*tpl-level*
-   si::frs-top
-   si::ihs-top
-   si::ihs-fun
-   si::ihs-env
-   si::sch-frs-base
-   si::set-break-env
-   si::set-current-ihs
-   si::tpl-commands))
+(eval-when (:compile-toplevel :load-toplevel :execute)
+  (import
+   '(si::*break-env*
+     si::*ihs-top*
+     si::*ihs-current*
+     si::*ihs-base*
+     si::*frs-base*
+     si::*frs-top*
+     si::*tpl-commands*
+     si::*tpl-level*
+     si::frs-top
+     si::ihs-top
+     si::ihs-fun
+     si::ihs-env
+     si::sch-frs-base
+     si::set-break-env
+     si::set-current-ihs
+     si::tpl-commands)))
 
 (defvar *backtrace* '())
 
@@ -230,10 +232,10 @@
   (and
    (symbolp x)
    (member (symbol-package x)
-           (list #.(find-package :swank)
-                 #.(find-package :swank-backend)
-                 #.(ignore-errors (find-package :swank-mop))
-                 #.(ignore-errors (find-package :swank-loader))))
+           (list (find-package :swank)
+                 (find-package :swank-backend)
+                 (ignore-errors (find-package :swank-mop))
+                 (ignore-errors (find-package :swank-loader))))
    t))
 
 (defun is-swank-source-p (name)
diff --git a/swank.lisp b/swank.lisp
index 8c6ef3a..38479ea 100644
--- a/swank.lisp
+++ b/swank.lisp
@@ -1419,7 +1419,7 @@ converted to lower case."
                   (process-form-for-emacs (cdr form))))
     (character (format nil "?~C" form))
     (symbol (concatenate 'string (when (eq (symbol-package form)
-                                           #.(find-package "KEYWORD"))
+                                           (find-package "KEYWORD"))
                                    ":")
                          (string-downcase (symbol-name form))))
     (number (let ((*print-base* 10))
