Author: Stelian Ionescu <sionescu@common-lisp.net>
Date: 2008-09-28
Status: Pending
Description: Better treatment of implmentation features

diff -rN -u old-asdf-binary-locations/dev/main.lisp new-asdf-binary-locations/dev/main.lisp
--- old-asdf-binary-locations/dev/main.lisp	2008-09-24 04:35:31.000000000 +0200
+++ new-asdf-binary-locations/dev/main.lisp	2008-09-24 04:35:31.000000000 +0200
@@ -58,7 +58,7 @@
 
 
 (defparameter *implementation-features*
-  '(:allegro :lispworks :sbcl :openmcl :cmu :clisp :ccl
+  '(:allegro :lispworks :sbcl :ccl :openmcl :cmu :clisp
     :corman :cormanlisp :armedbear :gcl :ecl :scl))
 
 (defparameter *os-features*
@@ -69,8 +69,8 @@
     :linux :unix))
 
 (defparameter *architecture-features*
-  '(:amd64 :x86-64 :x86_64 :i686 :i586 :pentium3 
-    :i486 :i386 :pc386 :iapx386 :x86 :pentium4
+  '(:amd64 (:x86-64 :x86_64 :x8664-target) :i686 :i586 :pentium3 
+    :i486 (:i386 :pc386 :iapx386) (:x86 :x8632-target) :pentium4
     :hppa64 :hppa :ppc64 :ppc32 :powerpc :ppc :sparc64 :sparc))
 
 ;; note to gwking: this is in slime, system-check, and system-check-server too
@@ -116,13 +116,24 @@
 operating system, and hardware architecture."
   (or *implementation-specific-directory-name*
       (setf *implementation-specific-directory-name*
-            (flet ((first-of (features)
-                     (loop for f in features
-                           when (find f *features*) return it))
-                   (maybe-warn (value fstring &rest args)
-                     (cond (value)
-                           (t (apply #'warn fstring args)
-                              "unknown"))))
+            (labels ((fp (thing)
+                       (etypecase thing
+                         (symbol
+                          (let ((feature (find thing *features*)))
+                            (when feature (return-from fp feature))))
+                         ;; allows features to be lists of which the first
+                         ;; member is the "main name", the rest being aliases
+                         (cons
+                          (dolist (subf thing)
+                            (let ((feature (find subf *features*)))
+                              (when feature (return-from fp (first thing))))))))
+                     (first-of (features)
+                       (loop for f in features
+                             when (fp f) return it))
+                     (maybe-warn (value fstring &rest args)
+                       (cond (value)
+                             (t (apply #'warn fstring args)
+                                "unknown"))))
               (let ((lisp (maybe-warn (first-of *implementation-features*)
                                       "No implementation feature found in ~a." 
                                       *implementation-features*))

